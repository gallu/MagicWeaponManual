MVCフレームワークとして使うMagicWeapon

まずはざっくりとHello World
	MagicWeaponの設置
	いわゆる「プロジェクト」のディレクトリを切る
		大まかな、各ディレクトリの意味
	base.incの用意と基準ディレクトリの設定
	DocumentRootを細工する
		細工できないとき用の、mod_rewriteを使った逃げ道提案
	configに最低限を設定する
		config
		map
	modelクラスを用意する
	表示してみる
	プログラムの流れのおさらい

テンプレートエンジン使ってHello World
	テンプレートエンジンを選ぶ
		Smartyの場合の設定
		CONVの場合の注意
		それ以外のテンプレートエンジンを使うときの注意
	出力してみる

modelをもうちょっと継承してみる
	base_model_base.incとbase_model_front_base.incを用意してみる
	modelの継承ルートを変えて動かしてみる
	わざわざ継承クラスを増やす意味

mapファイルについて
	省略表記の方法
	わざわざ明示する理由
	応用編：静的なPage群の出力方法

-----------------------------
DBにつなげてみる
	DBハンドルの取得方法
		設定(db.conf)
		メソッド(model#get_db())
	とりあえずvar_dumpあたりで確認してみる
	文字化けするときの対策：プログラム側関数で片付けず、Mysqlのclientの設定で片付けましょう

--------------
KVSにつなげてみる
	KVSハンドルの取得方法

開発環境とステージング環境と本番環境を切り替える
	切り替え方の提案：シンボリックリンクによる切り替え
	どのconfigをどんな風に分離するか
	configの書式、特に@includeについて
	切り替えて動かす

MagicWeaponにおけるDBアクセスの考え方
	ORMは使わないよ、的な
	「PKを取得するSQL」と「１レコードを取得するdata_clump」というやり方について

データを持ちまわる
	sessionとbagの違い
	modelにあるbag
	mw_area_setting(推奨できるかは微妙だけど)
	sessionでのデータの持ち回り

data_clumpについて簡単に
	もともとの出来た経緯
	data_clumpの作り方：コマンド使うと楽よん、的な
	使い方：formからの取得についてとDBアクセス関連

一般的なPHPフレームワークとの対比
	MVCの用い方の違い
	一般的な「controller+action」をMagicWeaponのmodelに落とす方法一案
	mod_rewrite周り：URIからの推測について


いわゆる「入力→確認→完了」の作り方
	画面遷移の流れ
	data_clumpにvalidateをしてもらう
	基本のvalidateでは対応しきれない時は？
	テンプレートにエラーメッセージを書く

data_clumpについてもうちょいと
	項目の追加の仕方
	「データにまつわる処理」はここに集めましょう的な話
	テンプレートエンジンとの連携関連
	memcachedを使ってみる：data_clump.conf
	insertとupdateで異なるvalidateをする

DIの話
	DIっつかファクトリーなんだけどねぇ、的な話

管理画面を作ってみる
	認証の作られ方
		authenticationのMW的基本実装
		autholizationのMW的基本実装
		authenticationの実装オプション
		autholizationをPHP sessionで実装する
		autholizationの実装その他

「認証してもしなくてもよい」画面の作成

会員登録系の作り方一式

マルチプルDBの話
	DBハンドル周りの話
	data_clump周りの話(特にadaptor関連)
	memcachedとの連携

viewクラスの継承
	「携帯とPCとスマフォ」のスイッチ
	言語別のスイッチ

テンプレートエンジンとXSSの話

SQLの書き方とSQL-Injectionのお話

CSRFの防ぎ方の提案

